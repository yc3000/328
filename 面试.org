
我把 leetcode 训练分成了
- 解题技巧
- 代码表达
解题技巧要多借鉴别人, 代码表达才是提升能力.
所以我给前 10 分钟是用来思考解题技巧, 如果想不出来就会取看别人视频.
代码表达我给了 20 分钟的时间.

* Leetcode
** 链表
*** DONE 移除链表元素
    CLOSED: [2023-04-06 Thu 14:37]
    - State "DONE"       from "STARTED"    [2023-04-06 Thu 14:37]
   :LOGBOOK:
   CLOCK: [2023-04-06 Thu 14:23]--[2023-04-06 Thu 14:37] =>  0:14
   CLOCK: [2023-03-28 Tue 20:18]--[2023-03-28 Tue 21:24] =>  1:06
   CLOCK: [2023-03-28 Tue 17:08]--[2023-03-28 Tue 17:31] =>  0:23
   :END:
   
- [X] 描述: 给一个 head 链表, 和一个数, 删除链表中所有数 == target 的节点
- [X] 数据集: 10000 个节点
- [X] 时间复杂度: O(N)
- [ ] 方法: 记录前一个指针, 遍历一遍.

*** STARTED 重排链表
   :LOGBOOK:
   CLOCK: [2023-03-28 Tue 21:44]--[2023-03-28 Tue 23:00] =>  1:16
   :END:
*** DONE 反转链表
   CLOSED: [2023-03-28 Tue 20:16]
   - State "DONE"       from "STARTED"    [2023-03-28 Tue 20:16]
   :LOGBOOK:
   CLOCK: [2023-03-28 Tue 19:41]--[2023-03-28 Tue 20:16] =>  0:35
   CLOCK: [2023-03-28 Tue 16:54]--[2023-03-28 Tue 17:07] =>  0:13
   :END:
   
- [X] 题目描述: 把链表反转 
- [X] 数据集: 5000
- [X] 时间复杂度 :O(N)
- [X] 方法1: 迭代 O(N), 遍历元素, 保留下一个元素节点, 该元素的 next 指向上一个元素.
- [ ] 方法2: 递归 O(N), ,cxo

*** DONE 反转链表2
    CLOSED: [2023-04-08 Sat 11:00]
    - State "DONE"       from "STARTED"    [2023-04-08 Sat 11:00]
    :LOGBOOK:
    CLOCK: [2023-04-08 Sat 10:54]--[2023-04-08 Sat 11:00] =>  0:06
    CLOCK: [2023-04-08 Sat 09:01]--[2023-04-08 Sat 10:12] =>  1:11
    CLOCK: [2023-04-08 Sat 07:55]--[2023-04-08 Sat 08:32] =>  0:37
    CLOCK: [2023-04-06 Thu 11:34]--[2023-04-06 Thu 11:54] =>  0:20
    CLOCK: [2023-04-06 Thu 11:12]--[2023-04-06 Thu 11:31] =>  0:19
    :END:
    
- [X] 描述：给定 head,left,right,left<right, 反转 [left,right] 的链表
- [ ] 数据集 : 500
- [ ] 时间复杂度: O(N), 一边遍历, 一边反转

*** DONE 相交链表
  CLOSED: [2023-03-28 Tue 12:58]
  - State "DONE"       from "STARTED"    [2023-03-28 Tue 12:58]
  :LOGBOOK:
  CLOCK: [2023-03-28 Tue 12:39]--[2023-03-28 Tue 12:55] =>  0:16
  :END:
  
- [ ] 描述: 给你两个链表, 找到相交的链表. 

- [ ] 方法: 遍历一遍, 放到哈希表里面.

- [ ] 步骤: 

*** DONE 合并两个有序链表 
   CLOSED: [2023-03-28 Tue 20:18]
   - State "DONE"       from "STARTED"    [2023-03-28 Tue 10:40]
  :LOGBOOK:
  CLOCK: [2023-03-28 Tue 10:33]--[2023-03-28 Tue 10:40] =>  0:07
  :END:
*** DONE 环形链表
   CLOSED: [2023-03-28 Tue 21:43]
   - State "DONE"       from "STARTED"    [2023-03-28 Tue 21:43]
   :LOGBOOK:
   CLOCK: [2023-03-28 Tue 21:27]--[2023-03-28 Tue 21:43] =>  0:16
   :END:
   
- [X] 方法1 : O(N) 哈希表，遍历一遍放到哈希表里面, 如果查找的时候在哈希表里面, 则代表重复; 

*** DONE 重尾到头打印链表 
   CLOSED: [2023-03-29 Wed 09:01]
   - State "DONE"       from "STARTED"    [2023-03-29 Wed 09:01]
   :LOGBOOK:
   CLOCK: [2023-03-29 Wed 08:54]--[2023-03-29 Wed 09:01] =>  0:07
   :END:
*** DONE 两个链表的第一个重合节点   
   CLOSED: [2023-03-29 Wed 09:08]
   - State "DONE"       from "STARTED"    [2023-03-29 Wed 09:08]
   :LOGBOOK:
   CLOCK: [2023-03-29 Wed 09:01]--[2023-03-29 Wed 09:08] =>  0:07
   :END:
*** STARTED 分割链表
   :LOGBOOK:
   CLOCK: [2023-03-29 Wed 09:10]--[2023-03-29 Wed 09:28] =>  0:18
   :END:
*** DONE 删除排序链表的重复元素    
    CLOSED: [2023-04-06 Thu 14:22]
    - State "DONE"       from "STARTED"    [2023-04-06 Thu 14:22]
    :LOGBOOK:
    CLOCK: [2023-04-06 Thu 14:09]--[2023-04-06 Thu 14:22] =>  0:13
    :END:
*** DONE 链表的中间节点
    CLOSED: [2023-04-06 Thu 14:54]
    - State "DONE"       from "STARTED"    [2023-04-06 Thu 14:54]
    :LOGBOOK:
    CLOCK: [2023-04-06 Thu 14:38]--[2023-04-06 Thu 14:54] =>  0:16
    :END:
*** DONE 排序链表
    CLOSED: [2023-04-08 Sat 13:46]
    - State "DONE"       from "STARTED"    [2023-04-08 Sat 13:46]
    :LOGBOOK:
    CLOCK: [2023-04-08 Sat 12:52]--[2023-04-08 Sat 13:46] =>  0:54
    CLOCK: [2023-04-08 Sat 11:25]--[2023-04-08 Sat 11:56] =>  0:31
    CLOCK: [2023-04-08 Sat 11:01]--[2023-04-08 Sat 11:23] =>  0:22
    :END:
    
- [ ] 排序链表, 使用的归并排序, 什么是归并排序呢? 

*** DONE 回文链表
    CLOSED: [2023-04-08 Sat 16:31]
    - State "DONE"       from "STARTED"    [2023-04-08 Sat 16:31]
    :LOGBOOK:
    CLOCK: [2023-04-08 Sat 15:26]--[2023-04-08 Sat 16:31] =>  1:05
    CLOCK: [2023-04-08 Sat 13:47]--[2023-04-08 Sat 14:40] =>  0:53
    :END:
    - [ ] 什么是回文链表, 如何写呢? 
    - [X] 入栈: 当 top 和新元素不同时
    - [ ] 出栈: 当 top 和新元素相同时
      - [ ] 把元素去掉
*** DONE 链表倒数第 k 个节点
    CLOSED: [2023-04-08 Sat 18:34]
    - State "DONE"       from "STARTED"    [2023-04-08 Sat 18:34]
    :LOGBOOK:
    CLOCK: [2023-04-08 Sat 18:28]--[2023-04-08 Sat 18:34] =>  0:06
    :END:
*** DONE 剑指 offer : 两个链表的第一个公共节点
    CLOSED: [2023-04-08 Sat 18:46]
    - State "DONE"       from "STARTED"    [2023-04-08 Sat 18:46]
    :LOGBOOK:
    CLOCK: [2023-04-08 Sat 18:35]--[2023-04-08 Sat 18:46] =>  0:11
    :END:
*** DONE 剑指 offer: 回文链表
    CLOSED: [2023-04-08 Sat 21:52]
    - State "DONE"       from "DONE"       [2023-04-08 Sat 21:53]
    - State "DONE"       from "STARTED"    [2023-04-08 Sat 21:52]
    :LOGBOOK:
    CLOCK: [2023-04-08 Sat 21:39]--[2023-04-08 Sat 21:52] =>  0:13
    CLOCK: [2023-04-08 Sat 18:47]--[2023-04-08 Sat 19:22] =>  0:35
    :END:
** 队列
*** 实现队列
**** DONE 最大值队列
     CLOSED: [2023-04-07 Fri 22:09]
     - State "DONE"       from "STARTED"    [2023-04-07 Fri 22:09]
     :LOGBOOK:
     CLOCK: [2023-04-07 Fri 20:57]--[2023-04-07 Fri 22:09] =>  1:12
     :END:
**** DONE 用栈实现队列
    CLOSED: [2023-04-06 Thu 16:14]
    - State "DONE"       from "STARTED"    [2023-04-06 Thu 16:14]
    :LOGBOOK:
    CLOCK: [2023-04-06 Thu 16:03]--[2023-04-06 Thu 16:14] =>  0:11
    :END:
**** DONE 用队列实现栈
     CLOSED: [2023-04-08 Sat 22:41]
     - State "DONE"       from "STARTED"    [2023-04-08 Sat 22:41]
    :LOGBOOK:
    CLOCK: [2023-04-08 Sat 21:52]--[2023-04-08 Sat 22:41] =>  0:49
    CLOCK: [2023-04-06 Thu 17:12]--[2023-04-06 Thu 17:22] =>  0:10
    CLOCK: [2023-04-06 Thu 16:53]--[2023-04-06 Thu 17:10] =>  0:17
    CLOCK: [2023-04-06 Thu 16:15]--[2023-04-06 Thu 16:24] =>  0:09
    :END:
**** STARTED 设计双端循环队列    
    :LOGBOOK:
    CLOCK: [2023-04-07 Fri 15:58]--[2023-04-07 Fri 16:52] =>  0:54
    :END:
**** 设计前中后队列
** 栈
** 数组
*** STARTED 删除升序数组的重复项
  :LOGBOOK:
  CLOCK: [2023-03-28 Tue 10:14]--[2023-03-28 Tue 10:31] =>  0:17
  CLOCK: [2023-03-28 Tue 09:55]--[2023-03-28 Tue 10:10] =>  0:15
  CLOCK: [2023-03-28 Tue 09:44]--[2023-03-28 Tue 09:54] =>  0:10
  :END:
  
- [X] 把不重复的项移到新容器; O(N) 时间复杂度, O(N) 空间复杂度.

- [ ] 把重复的元素往前面移动; O(N^2) 时间复杂度, O(1) 空间复杂度. 

*** DONE 合并两个有序数组
  CLOSED: [2023-03-28 Tue 13:19]
  - State "DONE"       from "STARTED"    [2023-03-28 Tue 13:19]
  :LOGBOOK:
  CLOCK: [2023-03-28 Tue 12:59]--[2023-03-28 Tue 13:19] =>  0:20
  :END:

- [X] 描述: 将两个非递减数组(1,1,2,2) 的数组合并到 num1, 依旧是非递减数组. 注意 num1 的 size() 是提前扩大的, 所以由 m,n 表示实际个数 

- [X] 数据集大小: 最多也就 200 个元素
- [X] 时间复杂度要求: 无   

- [X] 方法1 O(N^2): 遍历 num2, 然后往 nums1 插入. 

** 双指针与滑动窗口
*** STARTED 最大子数组和
  :LOGBOOK:
  CLOCK: [2023-03-28 Tue 14:05]--[2023-03-28 Tue 14:58] =>  0:53
  CLOCK: [2023-03-28 Tue 13:28]--[2023-03-28 Tue 13:51] =>  0:23
  :END:

- [X] 描述: 返回具有正数和负数的数组的子数组，使得子数组的和最大.

- [X] 数据集: 10 万个元素
- [X] 时间复杂度: O(N)

- [X] 方法1: O(N^2) 暴力法: 遍历每个元素, 以其为开头遍历一到末尾, 得到最大的和.
- [ ] 方法2: O(N) 双指针法: 遍历数组, 
    
  - [ ] 步骤:

    - 先 for 遍历数组, 到达 
  
** 树
*** 四大遍历
**** DONE 二叉树的中序遍历
    CLOSED: [2023-04-09 Sun 10:36]
    - State "DONE"       from "STARTED"    [2023-04-09 Sun 10:36]
    :LOGBOOK:
    CLOCK: [2023-04-09 Sun 10:08]--[2023-04-09 Sun 10:36] =>  0:28
    :END:

**** STARTED 二叉树的层次遍历
    :LOGBOOK:
    CLOCK: [2023-04-09 Sun 10:38]--[2023-04-09 Sun 11:16] =>  0:38
    :END:
*** DONE 判断是否是平衡二叉树
    CLOSED: [2023-04-09 Sun 12:30]
    - State "DONE"       from "STARTED"    [2023-04-09 Sun 12:30]
    :LOGBOOK:
    CLOCK: [2023-04-09 Sun 11:55]--[2023-04-09 Sun 12:30] =>  0:28
    :END:
*** 递归求深度
**** DONE 二叉树的深度
    CLOSED: [2023-04-09 Sun 14:17]
    - State "DONE"       from "STARTED"    [2023-04-09 Sun 14:17]
    :LOGBOOK:
    CLOCK: [2023-04-09 Sun 14:10]--[2023-04-09 Sun 14:17] =>  0:07
    :END:
**** DONE 二叉树的最小深度
     CLOSED: [2023-04-09 Sun 15:00]
     - State "DONE"       from "STARTED"    [2023-04-09 Sun 14:56]
     :LOGBOOK:
     CLOCK: [2023-04-09 Sun 14:18]--[2023-04-09 Sun 15:00] =>  0:42
     :END:

- [X] 子节点如果为 nullptr, 则不能算 0. 

      因为只有当某个节点单侧有树的时候, 不能算起为叶子节点, 即 1. 如果该把另一侧 nullptr 的算 0, 则求 min 的时候会错误的忽略.
            
- [ ]  
  
**** DONE N叉树的最大深度
     CLOSED: [2023-04-09 Sun 15:32]
     - State "DONE"       from "STARTED"    [2023-04-09 Sun 15:32]
     :LOGBOOK:
     CLOCK: [2023-04-09 Sun 15:22]--[2023-04-09 Sun 15:32] =>  0:10
     :END:
* 剑指 offer 训练
<2023-04-09 Sun 7:20>
<2023-04-09 Sun 9:30>
** DONE 03 数组中重复的数字
   CLOSED: [2023-04-09 Sun 07:32]
   - State "DONE"       from "STARTED"    [2023-04-09 Sun 07:32]
   :LOGBOOK:
   CLOCK: [2023-04-09 Sun 07:27]--[2023-04-09 Sun 07:32] =>  0:05
   :END:

** DONE 04 二维数组中的查找
   CLOSED: [2023-04-09 Sun 07:49]
   - State "DONE"       from "STARTED"    [2023-04-09 Sun 07:49]
   - State "STARTED"    from "DONE"       [2023-04-09 Sun 07:32]
   :LOGBOOK:
   CLOCK: [2023-04-09 Sun 07:32]--[2023-04-09 Sun 07:49] =>  0:17
   :END:

** DONE 05-替换空格
   CLOSED: [2023-04-09 Sun 07:58]
   - State "DONE"       from "STARTED"    [2023-04-09 Sun 07:58]
   :LOGBOOK:
   CLOCK: [2023-04-09 Sun 07:50]--[2023-04-09 Sun 07:58] =>  0:08
   :END:
** DONE 06-从尾到头打印链表
   CLOSED: [2023-04-09 Sun 08:03]
   - State "DONE"       from "STARTED"    [2023-04-09 Sun 08:03]
   :LOGBOOK:
   CLOCK: [2023-04-09 Sun 07:59]--[2023-04-09 Sun 08:03] =>  0:04
   :END:
** STARTED 07-重建二叉树
   :LOGBOOK:
   CLOCK: [2023-04-09 Sun 08:19]--[2023-04-09 Sun 08:59] =>  0:40
   :END:
    

* 基础库
** DONE Array
   CLOSED: [2023-03-29 Wed 22:13]
   - State "DONE"       from "STARTED"    [2023-03-29 Wed 22:13]
  :LOGBOOK:
  CLOCK: [2023-03-29 Wed 20:50]--[2023-03-29 Wed 22:13] =>  1:23
  :END:
  
- [X] array 
  - [X] Push_back
  - [X] Pop_back
  - [X] resize
  - [X] reverse
  - [X] __capacity
  
** STARTED List
   :LOGBOOK:
   CLOCK: [2023-03-29 Wed 22:14]--[2023-03-29 Wed 23:14] =>  1:00
   :END:

** Heap

** Hashtable

** rbtree
