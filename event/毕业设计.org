* STRT 开题报告
  :LOGBOOK:
  CLOCK: [2023-04-07 Fri 15:49]--[2023-04-07 Fri 15:56] =>  0:07
  :END:


* 用来代替 c++ 后端的语言之 golang
** 基础数据结构
*** DONE Container/list
   CLOSED: [2023-04-09 Sun 22:26]
   - State "DONE"       from "STRT"    [2023-04-09 Sun 22:26]
   :LOGBOOK:
   CLOCK: [2023-04-09 Sun 21:28]--[2023-04-09 Sun 22:26] =>  0:58
   :END:
*** DONE Container/ring
    CLOSED: [2023-04-10 Mon 10:06]
    - State "DONE"       from "STRT"    [2023-04-10 Mon 10:06]
    :LOGBOOK:
    CLOCK: [2023-04-10 Mon 9:35]--[2023-04-10 Mon 10:06] =>  0:31
    CLOCK: [2023-04-10 Mon 08:13]--[2023-04-10 Mon 08:59] =>  0:46
    CLOCK: [2023-04-10 Mon 06:54]--[2023-04-10 Mon 07:54] =>  1:00
    :END:
*** DONE Golang 高级语言的数组, 切片与浅拷贝与深拷贝
    CLOSED: [2023-04-10 Mon 11:20]
    - State "DONE"       from "STRT"    [2023-04-10 Mon 11:11]
    :LOGBOOK:
    CLOCK: [2023-04-10 Mon 10:39]--[2023-04-10 Mon 11:20] =>  0:41
    CLOCK: [2023-04-10 Mon 10:25]--[2023-04-10 Mon 10:39] =>  0:14
    :END:
*** DONE 实现队列: 用高级数组 + 切片的方式
    CLOSED: [2023-04-12 Wed 16:05]
    - State "DONE"       from "STRT"    [2023-04-12 Wed 16:05]
    :LOGBOOK:
    CLOCK: [2023-04-12 Wed 15:38]--[2023-04-12 Wed 16:05] =>  0:27
    CLOCK: [2023-04-12 Wed 15:34]--[2023-04-12 Wed 15:36] =>  0:02
    CLOCK: [2023-04-10 Mon 11:32]--[2023-04-10 Mon 11:45] =>  0:13
    :END:
    
    [[~/328/用高级语言的高级数组 + 切片的方式.org]]

*** DONE 实现栈: 用高级数组和切片的方式
    CLOSED: [2023-04-12 Wed 17:14]
    - State "DONE"       from "STRT"    [2023-04-12 Wed 17:14]
    :LOGBOOK:
    CLOCK: [2023-04-12 Wed 16:34]--[2023-04-12 Wed 17:14] =>  0:40
    :END:
*** DONE 哈希表
    CLOSED: [2023-04-12 Wed 22:35]
    - State "DONE"       from "STRT"    [2023-04-12 Wed 22:35]
    :LOGBOOK:
    CLOCK: [2023-04-12 Wed 21:18]--[2023-04-12 Wed 22:35] =>  1:17
    :END:
    
- [X] 需要分配实例才能工作, 而数组使用一个全局 append, 即使传入 nil, 也能返回新的"值语义的对象引用". 
- [X] 添加和更新 : 使用 map[] = xxoo 的形式, 已经存在就是更新, 否则就是添加
- [X] 删除    : 使用全局的 delete, 如果不存在也不会报错
- [X] 查询    : 非常重要, 不能和添加搞混, 依旧使用中括号的形式,  xxoo = map[].
  返回一个 bool 用于确认是否查询成功, 如果成功, 则返回 ok.
  
*** DONE 字符串
    CLOSED: [2023-04-13 Thu 14:02]
    - State "DONE"       from "STRT"    [2023-04-13 Thu 14:02]
:LOGBOOK:
CLOCK: [2023-04-13 Thu 13:14]--[2023-04-13 Thu 14:02] =>  0:48
CLOCK: [2023-04-13 Thu 11:17]--[2023-04-13 Thu 11:54] =>  0:37
CLOCK: [2023-04-13 Thu 11:15]--[2023-04-13 Thu 11:16] =>  0:01
:END:
- [-] 字符串操作
  - [X] 字符串类型是字符串, 不是 splice 切片, 所以两者操作不共同
  - [ ] 有内置的 strings 包, 提供基本的分割, 查找等功能
- [X] 字符串与其他类型的转换: 非常重要, 在实际的应用开发中, 大多数时候就是处理字符串, 从其中提取基本类型进行处理
  - [X] 提取数字: 通过 strconv 转换
- [X] 修改字符串
  - [X] 通过将 type:str 转换为 byte 或 rune, 然后修改并转换为 string 显示或赋予新值, 本质就是拷贝
  - [X] 通过 strings.replace 替换, 也是通过 new 一个新的, 但是拷贝中间的 byte/rune
- [X] 字符串比较: string.compare(s1, s2)
- [X] 拼接字符串 : + 
- [X] 字符串查找子串
  - [X] 判断是否包含子串
  - [X] 返回位置
    - [X] 从头
    - [X] 从尾
- [X] 分割字符串 : 分割字符串, 得到分割数组
- [X] Join: 分割的反操作, 将字符数组拼接在一起
  
- [X] 作业题: 用十分钟, 将 alkjdl123slkjdflsj 的数字提取出来
  
** 网络 
:LOGBOOK:
CLOCK: [2023-04-14 Fri 09:43]--[2023-04-14 Fri 10:50] =>  1:07
:END:
*** DONE Socket 
    CLOSED: [2023-04-13 Thu 16:21]
    - State "DONE"       from "STRT"    [2023-04-13 Thu 16:21]
    :LOGBOOK:
    CLOCK: [2023-04-13 Thu 15:47]--[2023-04-13 Thu 16:21] =>  0:34
    CLOCK: [2023-04-13 Thu 15:46]--[2023-04-13 Thu 15:47] =>  0:01
    CLOCK: [2023-04-13 Thu 15:12]--[2023-04-13 Thu 15:38] =>  0:26
    :END:
- [X] Echo Server
  - [X] (3) 复述其逻辑: 用户 listen, 然后在 for 循环里面 accept, 每个新的 conn 开一个携程去处理其逻辑; 
    因为协程可以并发执行, 所以每个连接的业务逻辑, 不用再去考虑回调, 而是直接开一个 for 监听用户的数据.  
    这里的问题是, 直接 read 而不是 peek, 因为逻辑业务简单, 就不考虑 tcp 粘包问题. 
  - [X] (5) 背诵代码
  - [X] (10) 写代码 
- [X] Echo Client
  - [X] 逻辑
  - [X] 代码
  - [X] 写
